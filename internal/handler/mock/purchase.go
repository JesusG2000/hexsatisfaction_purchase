// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mock

import (
	context "context"

	model "github.com/JesusG2000/hexsatisfaction_purchase/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Purchase is an autogenerated mock type for the Purchase type
type Purchase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, request
func (_m *Purchase) Create(ctx context.Context, request model.CreatePurchaseRequest) (string, error) {
	ret := _m.Called(ctx, request)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, model.CreatePurchaseRequest) string); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.CreatePurchaseRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, request
func (_m *Purchase) Delete(ctx context.Context, request model.DeletePurchaseRequest) (string, error) {
	ret := _m.Called(ctx, request)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, model.DeletePurchaseRequest) string); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.DeletePurchaseRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAfterDate provides a mock function with given fields: ctx, request
func (_m *Purchase) FindAfterDate(ctx context.Context, request model.AfterDatePurchaseRequest) ([]model.PurchaseDTO, error) {
	ret := _m.Called(ctx, request)

	var r0 []model.PurchaseDTO
	if rf, ok := ret.Get(0).(func(context.Context, model.AfterDatePurchaseRequest) []model.PurchaseDTO); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PurchaseDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.AfterDatePurchaseRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx
func (_m *Purchase) FindAll(ctx context.Context) ([]model.PurchaseDTO, error) {
	ret := _m.Called(ctx)

	var r0 []model.PurchaseDTO
	if rf, ok := ret.Get(0).(func(context.Context) []model.PurchaseDTO); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PurchaseDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByUserID provides a mock function with given fields: ctx, request
func (_m *Purchase) FindAllByUserID(ctx context.Context, request model.UserIDPurchaseRequest) ([]model.PurchaseDTO, error) {
	ret := _m.Called(ctx, request)

	var r0 []model.PurchaseDTO
	if rf, ok := ret.Get(0).(func(context.Context, model.UserIDPurchaseRequest) []model.PurchaseDTO); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PurchaseDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserIDPurchaseRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBeforeDate provides a mock function with given fields: ctx, request
func (_m *Purchase) FindBeforeDate(ctx context.Context, request model.BeforeDatePurchaseRequest) ([]model.PurchaseDTO, error) {
	ret := _m.Called(ctx, request)

	var r0 []model.PurchaseDTO
	if rf, ok := ret.Get(0).(func(context.Context, model.BeforeDatePurchaseRequest) []model.PurchaseDTO); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PurchaseDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.BeforeDatePurchaseRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByFileID provides a mock function with given fields: ctx, request
func (_m *Purchase) FindByFileID(ctx context.Context, request model.FileIDPurchaseRequest) ([]model.PurchaseDTO, error) {
	ret := _m.Called(ctx, request)

	var r0 []model.PurchaseDTO
	if rf, ok := ret.Get(0).(func(context.Context, model.FileIDPurchaseRequest) []model.PurchaseDTO); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PurchaseDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.FileIDPurchaseRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, request
func (_m *Purchase) FindByID(ctx context.Context, request model.IDPurchaseRequest) (*model.PurchaseDTO, error) {
	ret := _m.Called(ctx, request)

	var r0 *model.PurchaseDTO
	if rf, ok := ret.Get(0).(func(context.Context, model.IDPurchaseRequest) *model.PurchaseDTO); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PurchaseDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.IDPurchaseRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPeriod provides a mock function with given fields: ctx, request
func (_m *Purchase) FindByPeriod(ctx context.Context, request model.PeriodPurchaseRequest) ([]model.PurchaseDTO, error) {
	ret := _m.Called(ctx, request)

	var r0 []model.PurchaseDTO
	if rf, ok := ret.Get(0).(func(context.Context, model.PeriodPurchaseRequest) []model.PurchaseDTO); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PurchaseDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.PeriodPurchaseRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserIDAfterDate provides a mock function with given fields: ctx, request
func (_m *Purchase) FindByUserIDAfterDate(ctx context.Context, request model.UserIDAfterDatePurchaseRequest) ([]model.PurchaseDTO, error) {
	ret := _m.Called(ctx, request)

	var r0 []model.PurchaseDTO
	if rf, ok := ret.Get(0).(func(context.Context, model.UserIDAfterDatePurchaseRequest) []model.PurchaseDTO); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PurchaseDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserIDAfterDatePurchaseRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserIDAndFileID provides a mock function with given fields: ctx, request
func (_m *Purchase) FindByUserIDAndFileID(ctx context.Context, request model.UserIDFileIDPurchaseRequest) ([]model.PurchaseDTO, error) {
	ret := _m.Called(ctx, request)

	var r0 []model.PurchaseDTO
	if rf, ok := ret.Get(0).(func(context.Context, model.UserIDFileIDPurchaseRequest) []model.PurchaseDTO); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PurchaseDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserIDFileIDPurchaseRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserIDAndPeriod provides a mock function with given fields: ctx, request
func (_m *Purchase) FindByUserIDAndPeriod(ctx context.Context, request model.UserIDPeriodPurchaseRequest) ([]model.PurchaseDTO, error) {
	ret := _m.Called(ctx, request)

	var r0 []model.PurchaseDTO
	if rf, ok := ret.Get(0).(func(context.Context, model.UserIDPeriodPurchaseRequest) []model.PurchaseDTO); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PurchaseDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserIDPeriodPurchaseRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserIDBeforeDate provides a mock function with given fields: ctx, request
func (_m *Purchase) FindByUserIDBeforeDate(ctx context.Context, request model.UserIDBeforeDatePurchaseRequest) ([]model.PurchaseDTO, error) {
	ret := _m.Called(ctx, request)

	var r0 []model.PurchaseDTO
	if rf, ok := ret.Get(0).(func(context.Context, model.UserIDBeforeDatePurchaseRequest) []model.PurchaseDTO); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PurchaseDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserIDBeforeDatePurchaseRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLast provides a mock function with given fields: ctx
func (_m *Purchase) FindLast(ctx context.Context) (*model.PurchaseDTO, error) {
	ret := _m.Called(ctx)

	var r0 *model.PurchaseDTO
	if rf, ok := ret.Get(0).(func(context.Context) *model.PurchaseDTO); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PurchaseDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLastByUserID provides a mock function with given fields: ctx, request
func (_m *Purchase) FindLastByUserID(ctx context.Context, request model.UserIDPurchaseRequest) (*model.PurchaseDTO, error) {
	ret := _m.Called(ctx, request)

	var r0 *model.PurchaseDTO
	if rf, ok := ret.Get(0).(func(context.Context, model.UserIDPurchaseRequest) *model.PurchaseDTO); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PurchaseDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserIDPurchaseRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
