// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mock

import (
	context "context"
	time "time"

	model "github.com/JesusG2000/hexsatisfaction_purchase/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// File is an autogenerated mock type for the File type
type File struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, file
func (_m *File) Create(ctx context.Context, file model.FileDTO) (string, error) {
	ret := _m.Called(ctx, file)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, model.FileDTO) string); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.FileDTO) error); ok {
		r1 = rf(ctx, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *File) Delete(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByAuthorID provides a mock function with given fields: ctx, id
func (_m *File) DeleteByAuthorID(ctx context.Context, id int) (int, error) {
	ret := _m.Called(ctx, id)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindActual provides a mock function with given fields: ctx
func (_m *File) FindActual(ctx context.Context) ([]model.FileDTO, error) {
	ret := _m.Called(ctx)

	var r0 []model.FileDTO
	if rf, ok := ret.Get(0).(func(context.Context) []model.FileDTO); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FileDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAddedByPeriod provides a mock function with given fields: ctx, start, end
func (_m *File) FindAddedByPeriod(ctx context.Context, start time.Time, end time.Time) ([]model.FileDTO, error) {
	ret := _m.Called(ctx, start, end)

	var r0 []model.FileDTO
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []model.FileDTO); ok {
		r0 = rf(ctx, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FileDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx
func (_m *File) FindAll(ctx context.Context) ([]model.FileDTO, error) {
	ret := _m.Called(ctx)

	var r0 []model.FileDTO
	if rf, ok := ret.Get(0).(func(context.Context) []model.FileDTO); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FileDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByAuthorID provides a mock function with given fields: ctx, id
func (_m *File) FindByAuthorID(ctx context.Context, id int) ([]model.FileDTO, error) {
	ret := _m.Called(ctx, id)

	var r0 []model.FileDTO
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.FileDTO); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FileDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *File) FindByID(ctx context.Context, id string) (*model.FileDTO, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.FileDTO
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.FileDTO); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FileDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: ctx, name
func (_m *File) FindByName(ctx context.Context, name string) ([]model.FileDTO, error) {
	ret := _m.Called(ctx, name)

	var r0 []model.FileDTO
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.FileDTO); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FileDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNotActual provides a mock function with given fields: ctx
func (_m *File) FindNotActual(ctx context.Context) ([]model.FileDTO, error) {
	ret := _m.Called(ctx)

	var r0 []model.FileDTO
	if rf, ok := ret.Get(0).(func(context.Context) []model.FileDTO); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FileDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUpdatedByPeriod provides a mock function with given fields: ctx, start, end
func (_m *File) FindUpdatedByPeriod(ctx context.Context, start time.Time, end time.Time) ([]model.FileDTO, error) {
	ret := _m.Called(ctx, start, end)

	var r0 []model.FileDTO
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []model.FileDTO); ok {
		r0 = rf(ctx, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FileDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, file
func (_m *File) Update(ctx context.Context, id string, file model.FileDTO) (string, error) {
	ret := _m.Called(ctx, id, file)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, model.FileDTO) string); ok {
		r0 = rf(ctx, id, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, model.FileDTO) error); ok {
		r1 = rf(ctx, id, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
